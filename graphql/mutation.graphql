type Mutation {
    login(
        username: String!
            @rules(apply: ["required", "alpha_dash", "unique:users", "min:8"])
        password: String! @rules(apply: ["required", "min:8"])
    ): Auth!

    register(
        country_id: ID! @rules(apply: ["required"])
        mobile: String! @rules(apply: ["required", "numeric", "unique:users"])
        name: String! @rules(apply: ["required", "min:5"])
        username: String!
            @rules(apply: ["required", "alpha_dash", "unique:users", "min:8"])
        password: String! @rules(apply: ["required", "min:8"])
    ): Auth!

    validateRegister(
        name: String! @rules(apply: ["required", "min:5"])
        username: String!
            @rules(apply: ["required", "alpha_dash", "unique:users", "min:8"])
        password: String! @rules(apply: ["required", "min:8"])
    ): Boolean!

    requestOtp(
        country_id: ID! @rules(apply: ["required"])
        mobile: String! @rules(apply: ["required", "numeric", "exists:users"])
    ): String!

    verifyOtp(
        country_id: ID! @rules(apply: ["required"])
        mobile: String! @rules(apply: ["required", "numeric", "exists:users"])
        otp: Int! @rules(apply: ["required", "numeric"])
    ): Boolean!

    editProfile(
        name: String @rules(apply: ["min:5"])
        username: String @rules(apply: ["unique:users"])
        dob: String
        gender: String
        language: String
        avatar: String
        bio: String
    ): User! @middleware(checks: ["auth:api"])

    createPost(
        id: ID! @rules(apply: ["required"])
        category_id: ID! @rules(apply: ["required"])
        description: String
        published: Boolean
        attachments: [AttachmentInput!]!
    ): Post! @middleware(checks: ["auth:api"])

    sharePost(
        id: ID! @rules(apply: ["required"])
        post_id: ID! @rules(apply: ["required"])
    ): Post! @middleware(checks: ["auth:api"])

    createGroup(
        id: ID! @rules(apply: ["required"])
        name: ID! @rules(apply: ["required"])
        description: String
    ): Group! @middleware(checks: ["auth:api"])

    editGroup(
        id: ID! @rules(apply: ["required", "exists:groups"])
        name: ID!
        description: String
    ): Group! @middleware(checks: ["auth:api"])

    deleteGroup(id: ID! @rules(apply: ["required", "exists:groups"])): Group!
        @middleware(checks: ["auth:api"])
        @delete

    addParticipantsToGroup(
        group_id: ID! @rules(apply: ["required", "exists:groups,id"])
        participant_ids: [ID!]! @rules(apply: ["required"])
    ): Group! @middleware(checks: ["auth:api"])

    removeParticipantsFromGroup(
        group_id: ID! @rules(apply: ["required", "exists:groups,id"])
        participant_id: ID! @rules(apply: ["required"])
    ): Group! @middleware(checks: ["auth:api"])

    setTimer(duration: Int! @rules(apply: ["required"])): Timer!
        @middleware(checks: ["auth:api"])

    toggleFollow(following_id: ID! @rules(apply: ["required"])): String!
        @middleware(checks: ["auth:api"])

    toggleFavorite(post_id: ID! @rules(apply: ["required"])): String!
        @middleware(checks: ["auth:api"])

    addPrivateMessage(
        id: ID! @rules(apply: ["required"])
        text: String! @rules(apply: ["required"])
        chatroom_id: ID! @rules(apply: ["required"])
    ): Chat!
        @middleware(checks: ["auth:api"])
        @broadcast(subscription: "privateMessageAdded")

    addPostComment(
        id: ID! @rules(apply: ["required"])
        text: String! @rules(apply: ["required"])
        post_id: ID! @rules(apply: ["required"])
    ): Comment! @middleware(checks: ["auth:api"])

    deletePost(post_id: ID! @rules(apply: ["required"])): Boolean!
        @middleware(checks: ["auth:api"])

    addCommentReply(
        id: ID! @rules(apply: ["required"])
        text: String! @rules(apply: ["required"])
        post_id: ID! @rules(apply: ["required"])
        comment_id: ID! @rules(apply: ["required"])
    ): Reply! @middleware(checks: ["auth:api"])

    setConfig(
        id: ID! @rules(apply: ["required", "exists:configs"])
        country_id: ID! @rules(apply: ["required"])
        initial_screen: String
    ): Config!

    markNotificationsAsRead(
        notification_id: ID! @rules(apply: ["required"])
    ): Boolean! @middleware(checks: ["auth:api"])
}
