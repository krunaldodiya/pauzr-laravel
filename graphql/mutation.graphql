type Mutation {
    login(
        email: String! @rules(apply: ["required", "email", "exists:users"])
        password: String! @rules(apply: ["required", "min:8"])
    ): Auth!

    register(
        name: String! @rules(apply: ["required", "min:5"])
        country_id: ID! @rules(apply: ["required"])
        mobile: String! @rules(apply: ["required", "numeric"])
        email: String! @rules(apply: ["required", "email", "unique:users"])
        password: String! @rules(apply: ["required", "min:8"])
    ): Auth!

    requestOtp(
        mobile: String! @rules(apply: ["required", "numeric", "exists:users"])
    ): String!

    verifyOtp(
        mobile: String! @rules(apply: ["required", "numeric", "exists:users"])
        otp: Int! @rules(apply: ["required", "numeric"])
    ): Auth!

    editProfile(
        name: String @rules(apply: ["min:5"])
        username: String @rules(apply: ["unique:users"])
        dob: String
        gender: String
        language: String
        avatar: String
        bio: String
    ): User! @middleware(checks: ["auth:api"])

    createPost(
        id: ID! @rules(apply: ["required"])
        category_id: ID! @rules(apply: ["required"])
        type: String! @rules(apply: ["required"])
        description: String
        published: Boolean
        attachments: [AttachmentInput!]!
    ): Post! @middleware(checks: ["auth:api"])

    toggleFollow(following_id: ID! @rules(apply: ["required"])): String!
        @middleware(checks: ["auth:api"])

    toggleFavorite(post_id: ID! @rules(apply: ["required"])): String!
        @middleware(checks: ["auth:api"])

    addComment(
        post_id: ID! @rules(apply: ["required"])
        text: String! @rules(apply: ["required"])
    ): Comment!
        @create
        @inject(context: "user.id", name: "user_id")
        @middleware(checks: ["auth:api"])

    addReply(
        post_id: ID! @rules(apply: ["required"])
        comment_id: ID! @rules(apply: ["required"])
        text: String! @rules(apply: ["required"])
    ): Reply!
        @create
        @inject(context: "user.id", name: "user_id")
        @middleware(checks: ["auth:api"])
}
